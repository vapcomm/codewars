defmodule Skyscrapers7x7FastTest do
  @moduledoc """
  Upper level tests from kata
  """

  use ExUnit.Case
  import Skyscrapers7x7Fast
  @moduletag :capture_log

  test "medium" do
    clues = [
      7,0,0,0,2,2,3,
      0,0,3,0,0,0,0,
      3,0,3,0,0,5,0,
      0,0,0,0,5,0,4
    ]

    expected = [
      [1,5,6,7,4,3,2],
      [2,7,4,5,3,1,6],
      [3,4,5,6,7,2,1],
      [4,6,3,1,2,7,5],
      [5,3,1,2,6,4,7],
      [6,2,7,3,1,5,4],
      [7,1,2,4,5,6,3]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "hard 1" do
    clues = [
      6,4,0,2,0,0,3,
      0,3,3,3,0,0,4,
      0,5,0,5,0,2,0,
      0,0,0,4,0,0,3
    ]

    expected = [
      [2,1,6,4,3,7,5],
      [3,2,5,7,4,6,1],
      [4,6,7,5,1,2,3],
      [1,3,2,6,7,5,4],
      [5,7,1,3,2,4,6],
      [6,4,3,2,5,1,7],
      [7,5,4,1,6,3,2]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "hard 2" do
    clues = [
      0,2,3,0,2,0,0,
      5,0,4,5,0,4,0,
      0,4,2,0,0,0,6,
      5,2,2,2,2,4,1   # for a very very hard puzzle, replace the last 7 values with zeroes
    ]

    expected = [
      [7,6,2,1,5,4,3],
      [1,3,5,4,2,7,6],
      [6,5,4,7,3,2,1],
      [5,1,7,6,4,3,2],
      [4,2,1,3,7,6,5],
      [3,7,6,2,1,5,4],
      [2,4,3,5,6,1,7]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "hard 3" do
    clues = [0, 0, 0, 5, 0, 0, 3, 0, 6, 3, 4, 0, 0, 0, 3, 0, 0, 0, 2, 4, 0, 2, 6, 2, 2, 2, 0, 0]

    expected = [
      [3, 5, 6, 1, 7, 2, 4],
      [7, 6, 5, 2, 4, 3, 1],
      [2, 7, 1, 3, 6, 4, 5],
      [4, 3, 7, 6, 1, 5, 2],
      [6, 4, 2, 5, 3, 1, 7],
      [1, 2, 3, 4, 5, 7, 6],
      [5, 1, 4, 7, 2, 6, 3]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "very hard 1" do
    clues = [0, 0, 5, 0, 0, 0, 6, 4, 0, 0, 2, 0, 2, 0, 0, 5, 2, 0, 0, 0, 5, 0, 3, 0, 5, 0, 0, 3]

    expected = [
      [3, 4, 1, 7, 6, 5, 2],
      [7, 1, 2, 5, 4, 6, 3],
      [6, 3, 5, 2, 1, 7, 4],
      [1, 2, 3, 6, 7, 4, 5],
      [5, 7, 6, 4, 2, 3, 1],
      [4, 5, 7, 1, 3, 2, 6],
      [2, 6, 4, 3, 5, 1, 7]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "very hard 2" do
    clues = [
      0, 0, 5, 3, 0, 2, 0,
      0, 0, 0, 4, 5, 0, 0,
      0, 0, 0, 3, 2, 5, 4,
      2, 2, 0, 0, 0, 0, 5
    ]

    expected = [
      [2, 3, 1, 4, 6, 5, 7],
      [1, 7, 4, 6, 5, 2, 3],
      [3, 6, 5, 7, 2, 1, 4],
      [7, 5, 6, 3, 1, 4, 2],
      [6, 2, 7, 5, 4, 3, 1],
      [5, 4, 2, 1, 3, 7, 6],
      [4, 1, 3, 2, 7, 6, 5]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "very hard 4" do
    clues = [0, 2, 3, 0, 2, 0, 0, 5, 0, 4, 5, 0, 4, 0, 0, 4, 2, 0, 0, 0, 6, 5, 2, 2, 2, 2, 4, 1]

    expected = [
      [7, 6, 2, 1, 5, 4, 3],
      [1, 3, 5, 4, 2, 7, 6],
      [6, 5, 4, 7, 3, 2, 1],
      [5, 1, 7, 6, 4, 3, 2],
      [4, 2, 1, 3, 7, 6, 5],
      [3, 7, 6, 2, 1, 5, 4],
      [2, 4, 3, 5, 6, 1, 7]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "very very hard" do
    clues = [
      0,2,3,0,2,0,0,
      5,0,4,5,0,4,0,
      0,4,2,0,0,0,6,
      0,0,0,0,0,0,0   # as hard2, but with zeros in the last clues
    ]

    expected = [
      [7,6,2,1,5,4,3],
      [1,3,5,4,2,7,6],
      [6,5,4,7,3,2,1],
      [5,1,7,6,4,3,2],
      [4,2,1,3,7,6,5],
      [3,7,6,2,1,5,4],
      [2,4,3,5,6,1,7]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  test "Random puzzles" do
    clues = [0, 0, 0, 0, 5, 0, 4, 7, 0, 0, 0, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0, 0, 5, 0]
    expected = [
      [7, 6, 5, 4, 3, 2, 1], [1, 2, 3, 6, 4, 7, 5], [2, 7, 1, 3, 5, 4, 6], [4, 3, 2, 1, 6, 5, 7],
      [5, 1, 6, 2, 7, 3, 4], [6, 5, 4, 7, 2, 1, 3], [3, 4, 7, 5, 1, 6, 2]
    ]
    assert solve(clues) == expected

    clues = [3, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 4, 7, 0, 0, 0, 2, 2, 3, 0, 0, 3, 0, 0, 0, 0]
    expected = [
      [3, 6, 5, 4, 2, 1, 7], [4, 5, 1, 3, 7, 2, 6], [7, 4, 6, 2, 1, 3, 5], [5, 7, 2, 1, 3, 6, 4],
      [1, 2, 7, 6, 5, 4, 3], [6, 1, 3, 5, 4, 7, 2], [2, 3, 4, 7, 6, 5, 1]
    ]
    assert solve(clues) == expected

    clues = [0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 4, 7, 0, 0, 0, 2, 2, 3]
    expected = [
      [2, 6, 1, 5, 7, 4, 3], [3, 1, 2, 7, 4, 5, 6], [4, 3, 7, 2, 6, 1, 5], [7, 5, 6, 1, 2, 3, 4],
      [6, 4, 5, 3, 1, 7, 2], [5, 7, 4, 6, 3, 2, 1], [1, 2, 3, 4, 5, 6, 7]
    ]
    assert solve(clues) == expected
  end

  test "medved" do
    clues = [3, 3, 2, 1, 2, 2, 3, 4, 3, 2, 4, 1, 4, 2, 2, 4, 1, 4, 5, 3, 2, 3, 1, 4, 2, 5, 2, 3]

    expected = [
      [2, 1, 4, 7, 6, 5, 3],
      [6, 4, 7, 3, 5, 1, 2],
      [1, 2, 3, 6, 4, 7, 5],
      [5, 7, 6, 2, 3, 4, 1],
      [4, 3, 5, 1, 2, 6, 7],
      [7, 6, 2, 5, 1, 3, 4],
      [3, 5, 1, 4, 7, 2, 6]
    ]

    actual = solve(clues)
    assert actual == expected
  end

  #----------- internal functions tests -----------

  test "hints counts" do
    rows_hints = [
      [{1, 2, 4, 3}, {1, 3, 4, 2}, {2, 3, 4, 1}],
      [{4, 2, 1, 3}, {4, 1, 2, 3}],
      [{1, 4, 3, 2}, {3, 4, 2, 1}, {2, 4, 3, 1}],
      [{2, 3, 1, 4}, {1, 3, 2, 4}, {2, 1, 3, 4}],
    ]
    columns_hints = [
      [{1, 4, 3, 2}, {3, 4, 2, 1}, {2, 4, 3, 1}],
      [{2, 1, 4, 3}, {2, 4, 1, 3}, {1, 4, 2, 3}, {3, 1, 4, 2}, {3, 4, 1, 2}, {3, 2, 4, 1}],
      [{4, 2, 1, 3}, {4, 1, 2, 3}],
      [{2, 3, 1, 4}, {1, 3, 2, 4}, {2, 1, 3, 4}]
    ]

    assert hints_count(rows_hints, columns_hints) == 11 + 14
  end

end
